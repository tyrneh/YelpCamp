const Campground = require("../models/campground");
const { cloudinary } = require("../cloudinary/index.js");
// mapbox
const mbxGeocoding = require("@mapbox/mapbox-sdk/services/geocoding");
const mapBoxToken = process.env.MAPBOX_TOKEN;
const geocoder = mbxGeocoding({ accessToken: mapBoxToken });

// INDEX ROUTE
const index = async (req, res) => {
  const campgrounds = await Campground.find({});
  res.render("campgrounds/index.ejs", { campgrounds });
};

// CREATE ROUTE
const newForm = (req, res) => {
  res.render("campgrounds/new.ejs");
};
// wrap catchAsync error handling around entire function
// if there is an error, catchAsync will catch it and pass it to next()
// and next() will be the final app.use() at the end of the page
const createCamp = async (req, res) => {
  //--- adding user input data ---
  const newCamp = await new Campground(req.body.campground);
  newCamp.author = req.user._id; // req.user is auto generated by Passport
  //--- add image data ---
  newCamp.images = req.files.map((f) => ({
    url: f.path,
    filename: f.filename,
  }));
  //--- adding geo coordinates data ---
  const geoData = await geocoder
    .forwardGeocode({
      query: req.body.campground.location,
      limit: 1,
    })
    .send();
  newCamp.geometry = geoData.body.features[0].geometry;

  await newCamp.save();
  req.flash("success", "Successfully made a new campground"); // creating a flash var in session
  res.redirect(`/campgrounds/${newCamp._id}`);
};

// SHOW ROUTE
const showCamp = async (req, res) => {
  const { id } = req.params;
  const camp = await Campground.findById(id)
    .populate("reviews")
    .populate("author")
    .populate({ path: "reviews", populate: "author" }); // nested populate: for the reviews data in the campground,
  //  populate the author associated with the review

  // if campground is not found, flash an error
  if (!camp) {
    req.flash("error", "Could not find that campground");
    res.redirect("/campgrounds");
  }

  res.render("campgrounds/show.ejs", { camp });
};

// EDIT ROUTE
const editForm = async (req, res) => {
  const { id } = req.params;
  const camp = await Campground.findById(id);

  // if campground is not found, flash an error
  if (!camp) {
    req.flash("error", "Could not find that campground");
    res.redirect("/campgrounds");
  }

  res.render("campgrounds/edit.ejs", { camp });
};

const editCamp = async (req, res) => {
  const { id } = req.params;
  const camp = await Campground.findByIdAndUpdate(id, {
    ...req.body.campground,
  });

  // add image data
  const imageArray = req.files.map((f) => ({
    url: f.path,
    filename: f.filename,
  }));
  camp.images.push(...imageArray);

  await camp.save();

  // delete images from mongo database if any were checked
  if (req.body.deleteImages) {
    for (let filename of req.body.deleteImages) {
      await cloudinary.uploader.destroy(filename);
    }
    await camp.updateOne({
      $pull: { images: { filename: { $in: req.body.deleteImages } } },
    });
  }

  req.flash("success", "Successfuly updated campground"); // flash message
  res.redirect(`/campgrounds/${id}`);
};

// DELETE ROUTE
const deleteCamp = async (req, res) => {
  const { id } = req.params;
  await Campground.findByIdAndDelete(id);
  req.flash("success", "Successfully deleted campground");
  res.redirect("/campgrounds");
};

module.exports = {
  index,
  newForm,
  createCamp,
  showCamp,
  editForm,
  editCamp,
  deleteCamp,
};
